{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1ElfLJqWYlflnz86BgdCv_NhLyjU-53NT","timestamp":1757157282847},{"file_id":"1m6JHrKeXZ9VUXcOJj75BTMPpdOVLaSQk","timestamp":1756456047787}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# PDF-form-filler\n","\n"],"metadata":{"id":"rrzp8F3SKElZ"}},{"cell_type":"code","source":["# --- INSTALL DEPENDENCIES ---\n","!pip install -q pdfrw openpyxl\n","\n","# --- MOUNT GOOGLE DRIVE ---\n","from google.colab import drive, files\n","drive.mount('/content/drive')\n","\n","# --- IMPORTS ---\n","import os, re, sys, zipfile, shutil\n","import pandas as pd\n","from datetime import datetime\n","from pytz import timezone\n","from pdfrw import PdfReader, PdfWriter, PdfName, PdfObject\n","import requests\n","\n","\n","\n","# --- DOWNLOAD FILES FROM GITHUB ---\n","# GitHub raw URLs\n","EXCEL_URL = \"https://raw.githubusercontent.com/gmarchiello/PDF-form-filler/main/data/personal_data_change.xlsx\"\n","PDF_URL = \"https://raw.githubusercontent.com/gmarchiello/PDF-form-filler/main/data/data_form_editable.pdf\"\n","\n","# Local Colab paths (temporary)\n","EXCEL_PATH = \"/content/personal_data_change.xlsx\"\n","PDF_TEMPLATE = \"/content/data_form_editable.pdf\"\n","\n","# Download Excel\n","r = requests.get(EXCEL_URL)\n","with open(EXCEL_PATH, \"wb\") as f:\n","    f.write(r.content)\n","\n","# Download PDF\n","r = requests.get(PDF_URL)\n","with open(PDF_TEMPLATE, \"wb\") as f:\n","    f.write(r.content)\n","\n","print(\"✅ Files downloaded from GitHub\")\n","\n","# --- CONFIGURATION ---\n","# Constant values that will be inserted into specific PDF fields\n","CONFIG = {\n","    \"director\": \"John Smith\",\n","    \"exam_center_city\": \"Naples\",\n","    \"exam_center_country\": \"Italy\",\n","    \"institute_city\": \"Naples\",\n","    \"location\": \"Naples\",\n","}\n","\n","# --- MAPPING DEFINITIONS ---\n","# Maps PDF checkbox fields to their corresponding Excel columns\n","CHECKBOX_MAP = {\n","    \"chk_gender\": \"Gender_chk\",\n","    \"chk_name\": \"Name_chk\",\n","    \"chk_surname\": \"Surname_chk\",\n","    \"chk_date_of_birth\": \"Date_of_Birth_chk\",\n","    \"chk_place_of_birth\": \"Place_of_birth_chk\",\n","    \"chk_country_of_birth\": \"Country_of_birth_chk\",\n","    \"chk_email\": \"Email_chk\",\n","}\n","\n","# Maps PDF text fields to Excel columns.\n","# If the value is None, the field will be filled from CONFIG or current date.\n","TEXT_MAP = {\n","    \"txt_director\": None,\n","    \"txt_exam_center_city\": None,\n","    \"txt_exam_center_country\": None,\n","    \"txt_institute_city\": None,\n","    \"txt_client_code\": \"Client_code\",\n","    \"txt_exam_code\": \"Exam_code\",\n","    \"txt_gender\": \"Gender\",\n","    \"txt_name\": \"Name\",\n","    \"txt_surname\": \"Surname\",\n","    \"txt_country_of_birth\": \"Country_of_birth\",\n","    \"txt_date_of_birth\": \"Date_of_birth\",\n","    \"txt_place_of_birth\": \"Place_of_birth\",\n","    \"txt_email\": \"Email\",\n","    \"txt_location\": None,\n","    \"txt_today_date\": None,\n","}\n","\n","# --- LOAD AND VALIDATE FILES ---\n","try:\n","    missing_files = []\n","    if not os.path.exists(EXCEL_PATH):\n","        missing_files.append(EXCEL_PATH)\n","    if not os.path.exists(PDF_TEMPLATE):\n","        missing_files.append(PDF_TEMPLATE)\n","    if missing_files:\n","        file_word = \"file is\" if len(missing_files) == 1 else \"files are\"\n","        raise FileNotFoundError(f\"The following required {file_word} missing: \\n - {'\\n - '.join(missing_files)}\")\n","    print(\"✅ All required files are present.\")\n","\n","    # Load Excel data and normalize column headers\n","    df = pd.read_excel(EXCEL_PATH)\n","    df.columns = df.columns.str.strip()\n","    if df.columns.isnull().any() or (df.columns == \"\").any():\n","        raise ValueError(\"Excel contains empty or invalid column headers.\")\n","\n","    print(f\"✅ Excel loaded successfully: {EXCEL_PATH}\")\n","    print(f\"✅ Column headers normalized and valid: {list(df.columns)}\")\n","\n","    # Load PDF template and validate existence of form fields\n","    pdf_template = PdfReader(PDF_TEMPLATE)\n","    if not pdf_template.Root.AcroForm or not getattr(pdf_template.Root.AcroForm, \"Fields\", None):\n","        raise ValueError(\"PDF template does not contain form fields.\")\n","    print(f\"✅ PDF template loaded successfully: {PDF_TEMPLATE}\")\n","\n","    # Collect all available PDF field names for validation\n","    pdf_fields = set()\n","    for field in pdf_template.Root.AcroForm.Fields:\n","        if field.T:\n","            pdf_fields.add(field.T.to_unicode().strip())\n","\n","    # Ensure all required mapped fields exist in the PDF template\n","    missing_text = set(TEXT_MAP.keys()) - pdf_fields\n","    missing_checkboxes = set(CHECKBOX_MAP.keys()) - pdf_fields\n","\n","    if missing_text or missing_checkboxes:\n","        raise ValueError(\n","            f\"PDF template is missing required fields.\\n\"\n","            f\"Missing text fields: {missing_text}\\n\"\n","            f\"Missing checkboxes: {missing_checkboxes}\"\n","        )\n","    else:\n","        print(\"✅ PDF contains all required fields.\")\n","\n","    # --- Validate Excel columns ---\n","    excel_cols = set(df.columns)\n","\n","    # Columns required from TEXT_MAP and CHECKBOX_MAP (exclude None values)\n","    required_text_cols = set(c for c in TEXT_MAP.values() if c is not None)\n","    required_checkbox_cols = set(CHECKBOX_MAP.values())\n","\n","    missing_text_cols = required_text_cols - excel_cols\n","    missing_checkbox_cols = required_checkbox_cols - excel_cols\n","\n","    if missing_text_cols or missing_checkbox_cols:\n","        raise ValueError(\n","            f\"Excel is missing required columns.\\n\"\n","            f\"Missing text columns: {missing_text_cols}\\n\"\n","            f\"Missing checkbox columns: {missing_checkbox_cols}\"\n","        )\n","    else:\n","        print(\"✅ Excel contains all required columns.\")\n","\n","except FileNotFoundError as e:\n","    print(f\"❌ File not found. Please check your file paths.\\nError details: {e}\")\n","    sys.exit(1)\n","except ValueError as e:\n","    print(f\"❌ Configuration error. Please check your files.\\nError details: {e}\")\n","    sys.exit(1)\n","except Exception as e:\n","    print(f\"❌ An unexpected error occurred.\\nError details: {e}\")\n","    sys.exit(1)\n","\n","# --- OUTPUT FOLDER AND ZIP FILE ---\n","OUTPUT_FOLDER = \"/content/filled_forms\"\n","os.makedirs(OUTPUT_FOLDER, exist_ok=True)\n","italy_tz = timezone(\"Europe/Rome\")\n","timestamp = datetime.now(italy_tz).strftime(\"%Y%m%d_%H%M\")\n","zip_filename = f\"fulfilled_forms_{timestamp}.zip\"\n","zipf = zipfile.ZipFile(zip_filename, \"w\", zipfile.ZIP_DEFLATED)\n","print(f\"✅ Temporary output folder created: {OUTPUT_FOLDER}\")\n","\n","# --- FUNCTION DEFINITIONS ---\n","def get_checked_fields(row):\n","    \"\"\"\n","    Returns a list of user-friendly names for checkboxes marked 'ON' in the given row.\n","    \"\"\"\n","    changed = []\n","    for pdf_checkbox, excel_col in CHECKBOX_MAP.items():\n","        if str(row.get(excel_col, \"\")).strip().upper() == \"ON\":\n","            friendly_name = excel_col.replace(\"_chk\", \"\")\n","            changed.append(friendly_name)\n","    return changed\n","\n","def safe_get(value, for_pdf_field=True, placeholder=\"UNKNOWN\"):\n","    \"\"\"\n","    Safely extracts a value for PDF fields or filenames.\n","    - Returns an empty string for missing PDF values.\n","    - Returns 'UNKNOWN' for missing filename values.\n","    \"\"\"\n","    if pd.isna(value) or str(value).strip() in [\"\", \"nan\", \"NaT\"]:\n","        return \"\" if for_pdf_field else placeholder\n","\n","    # Convert float into integer if applicable\n","    if isinstance(value, float) and value.is_integer():\n","        value = int(value)\n","\n","    return str(value).strip()\n","\n","def fill_pdf(input_pdf_path, output_pdf_path, text_values, checkboxes_to_check):\n","    \"\"\"\n","    Fills a PDF template with provided text values and selected checkboxes.\n","    Ensures 'NeedAppearances' is set so form fields display correctly.\n","    \"\"\"\n","    pdf = PdfReader(input_pdf_path)\n","    pdf.Root.AcroForm.update({PdfName(\"NeedAppearances\"): PdfObject(\"true\")})\n","\n","    for page in pdf.pages:\n","        annotations = page.Annots\n","        if not annotations:\n","            continue\n","\n","        for annot in annotations:\n","            if annot.Subtype == PdfName.Widget and annot.T:\n","                key = annot.T.to_unicode().strip()\n","                # Insert text values\n","                if key in text_values:\n","                    annot.V = text_values[key]\n","                    annot.AP = None\n","                # Mark checkboxes\n","                elif key in checkboxes_to_check:\n","                    annot.V = PdfName(\"Yes\")\n","                    annot.AS = PdfName(\"Yes\")\n","\n","    PdfWriter().write(output_pdf_path, pdf)\n","\n","# --- PROCESS EXCEL ROWS AND GENERATE FILLED PDFS ---\n","email_data = []\n","\n","for idx, row in df.iterrows():\n","    checked_fields = get_checked_fields(row)\n","\n","    missing_fields = [\n","        excel_col.upper().replace(\" \", \"_\")\n","        for excel_col in TEXT_MAP.values()\n","        if excel_col is not None and (pd.isna(row.get(excel_col, None)) or str(row.get(excel_col)).strip() == \"\")]\n","    missing_checkbox = not bool(checked_fields)\n","\n","    suffix_list = []\n","    if checked_fields:\n","        suffix_list.append(\"_\".join(checked_fields).replace(\" \", \"_\"))\n","    if missing_fields:\n","        suffix_list.append(\"MISSING_\" + \"_\".join(missing_fields))\n","    if missing_checkbox:\n","        suffix_list.append(\"MISSING_CHECKBOX\")\n","\n","    name = safe_get(row.get(\"Name\"), for_pdf_field=False)\n","    surname = safe_get(row.get(\"Surname\"), for_pdf_field=False)\n","    safe_name = re.sub(r\"[^a-zA-Z0-9]\", \"_\", f\"{surname}_{name}_change_request_\" + \"_\".join(suffix_list))\n","    output_pdf_path = os.path.join(OUTPUT_FOLDER, f\"{safe_name}.pdf\")\n","\n","    text_values = {}\n","    for pdf_field, excel_col in TEXT_MAP.items():\n","        if excel_col:\n","            value = row.get(excel_col)\n","            if pdf_field == \"txt_date_of_birth\":\n","                birth_date = pd.to_datetime(value, errors=\"coerce\")\n","                text_values[pdf_field] = birth_date.strftime(\"%d/%m/%Y\") if pd.notnull(birth_date) else \"\"\n","            else:\n","                text_values[pdf_field] = safe_get(value)\n","        else:\n","            if pdf_field in [\"txt_director\", \"txt_exam_center_city\", \"txt_exam_center_country\",\n","                             \"txt_institute_city\", \"txt_location\"]:\n","                text_values[pdf_field] = CONFIG[pdf_field.replace(\"txt_\", \"\")]\n","            elif pdf_field == \"txt_today_date\":\n","                text_values[pdf_field] = datetime.now(italy_tz).strftime(\"%d %B %Y\")\n","\n","    checkboxes_to_check = [pdf_field for pdf_field, excel_col in CHECKBOX_MAP.items()\n","                           if str(row.get(excel_col, \"\")).strip().upper() == \"ON\"]\n","\n","    try:\n","        fill_pdf(PDF_TEMPLATE, output_pdf_path, text_values, checkboxes_to_check)\n","        zipf.write(output_pdf_path, os.path.basename(output_pdf_path))\n","    except Exception as e:\n","        print(f\"❌ Error processing row {idx}: {e}\")\n","        continue\n","\n","    changed_text = \", \".join(checked_fields) if checked_fields else \"No changes\"\n","    body_line = f\"{surname} {name} ({changed_text})\"\n","    if missing_fields:\n","        body_line += \" ⚠️ MISSING \" + \", \".join([mf.replace(\"_\", \" \") for mf in missing_fields])\n","    if missing_checkbox:\n","        body_line += \" ❗ MISSING CHECKBOX\"\n","    email_data.append((surname, name, body_line))\n","\n","# --- GENERATE EMAIL MESSAGES ---\n","email_data_with_changes = [\n","    entry for entry in email_data\n","    if \"No changes\" not in entry[2] or \"❗ MISSING CHECKBOX\" in entry[2] or \"⚠️ MISSING\" in entry[2]\n","]\n","\n","email_data_with_changes.sort()\n","chunk_size = 10\n","chunks = [email_data_with_changes[i:i + chunk_size]\n","          for i in range(0, len(email_data_with_changes), chunk_size)]\n","\n","for i, chunk in enumerate(chunks):\n","    subject_surname_name = [f\"{entry[1]} {entry[0]}\" for entry in chunk]\n","    email_subject = f\"Change Request: {', '.join(subject_surname_name)}\"\n","    email_body_lines = [f\"- {entry[2]}\" for entry in chunk]\n","    email_body = \"Good morning,\\nI kindly ask you to update the data of the following candidates:\\n\\n\" + \"\\n\".join(email_body_lines)\n","    print(f\"\\n--- Message {i + 1} ---\")\n","    print(email_subject)\n","    print(\"\\n\" + email_body)\n","    print(\"\\n-------------------\\n\")\n","\n","# --- FINALIZE ZIP AND DOWNLOAD ---\n","zipf.close()\n","files.download(zip_filename)\n","\n","\n","# --- REMOVE TEMPORARY FILES ---\n","if os.path.exists(EXCEL_PATH):\n","    os.remove(EXCEL_PATH)\n","if os.path.exists(PDF_TEMPLATE):\n","    os.remove(PDF_TEMPLATE)\n","if os.path.exists(OUTPUT_FOLDER):\n","    shutil.rmtree(OUTPUT_FOLDER)\n","\n","print(\"🗑️ Temporary files removed\")\n","print(f\"✅ All forms zipped as: {zip_filename}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Yh9YUOghGKxL","executionInfo":{"status":"ok","timestamp":1759085203018,"user_tz":-120,"elapsed":6352,"user":{"displayName":"Giuseppe Marchiello","userId":"16167191284035350936"}},"outputId":"8a246228-205e-47a9-d3de-a9b5f9b29eb9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","✅ Files downloaded from GitHub\n","✅ All required files are present.\n","✅ Excel loaded successfully: /content/personal_data_change.xlsx\n","✅ Column headers normalized and valid: ['Client_code', 'Exam_code', 'Gender', 'Name', 'Surname', 'Date_of_birth', 'Place_of_birth', 'Country_of_birth', 'Email', 'Gender_chk', 'Name_chk', 'Surname_chk', 'Date_of_Birth_chk', 'Place_of_birth_chk', 'Country_of_birth_chk', 'Email_chk']\n","✅ PDF template loaded successfully: /content/data_form_editable.pdf\n","✅ PDF contains all required fields.\n","✅ Excel contains all required columns.\n","✅ Temporary output folder created: /content/filled_forms\n","\n","--- Message 1 ---\n","Change Request: Zoey Adams, Leo Anderson, Gabriel Baker, Chiara Bianchi, Noah Brown, Ethan Clark, Sofia Esposito, Benjamin Garcia, Owen Hall, Mason Harris\n","\n","Good morning,\n","I kindly ask you to update the data of the following candidates:\n","\n","- Adams Zoey (Gender)\n","- Anderson Leo (Name)\n","- Baker Gabriel (Surname)\n","- Bianchi Chiara (Gender, Country_of_birth)\n","- Brown Noah (Date_of_Birth)\n","- Clark Ethan (Place_of_birth)\n","- Esposito Sofia (Date_of_Birth, Email)\n","- Garcia Benjamin (Country_of_birth) ⚠️ MISSING CLIENT CODE\n","- Hall Owen (Gender, Country_of_birth, Email)\n","- Harris Mason (Surname)\n","\n","-------------------\n","\n","\n","--- Message 2 ---\n","Change Request: Lucas Jackson, Liam Johnson, Grace King, Zofia Kowalska, Sophia Martin, Lili Nowak, Amelia Robinson, Francesca Rossi, Hans Schmidt, Steven Smith\n","\n","Good morning,\n","I kindly ask you to update the data of the following candidates:\n","\n","- Jackson Lucas (Place_of_birth)\n","- Johnson Liam (Surname, Country_of_birth)\n","- King Grace (Surname, Email)\n","- Kowalska Zofia (Surname, Email)\n","- Martin Sophia (Surname, Place_of_birth)\n","- Nowak Lili (Surname) ⚠️ MISSING EXAM CODE\n","- Robinson Amelia (Name)\n","- Rossi Francesca (Name, Country_of_birth)\n","- Schmidt Hans (Gender)\n","- Smith Steven (No changes) ❗ MISSING CHECKBOX\n","\n","-------------------\n","\n","\n","--- Message 3 ---\n","Change Request: Ava Taylor, Mia Thomas, Elijah UNKNOWN, Emma Wilson, Alexander Wright, Jacob Young\n","\n","Good morning,\n","I kindly ask you to update the data of the following candidates:\n","\n","- Taylor Ava (Email)\n","- Thomas Mia (Gender, Place_of_birth)\n","- UNKNOWN Elijah (Gender) ⚠️ MISSING SURNAME\n","- Wilson Emma (Name, Email) ⚠️ MISSING COUNTRY OF BIRTH\n","- Wright Alexander (Name, Country_of_birth)\n","- Young Jacob (Name, Surname)\n","\n","-------------------\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_b8fe878d-d0b6-4645-9b8a-fd40598bcd80\", \"fulfilled_forms_20250928_2046.zip\", 994859)"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["🗑️ Temporary files removed\n","✅ All forms zipped as: fulfilled_forms_20250928_2046.zip\n"]}]}]}